package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;


import dao.mappers.IMapResultIntoEntity;
import dao.uow.IUnitOfWork;
import domain.model.Profile;
import domain.model.Like;

public class LikeRepository extends RepositoryBase<Like> implements ILikeRepository{

    public LikeRepository(Connection connection, IMapResultIntoEntity<Like> mapper, IUnitOfWork uow) {
        super(connection,mapper,uow);
        try{
            selectByProfile = connection.prepareStatement(selectByProfileSQL());
        }catch (SQLException e){
            e.printStackTrace();
        }
    }

    protected String tableName(){
        return "likes";
    }

    protected String createTableSql() {
        return "CREATE TABLE likes("
            + "likeId bigint GENERATED BY DEFAULT AS IDENTITY,"
            + "sendDate varchar(255),"
            + "likeFrom INT,"
            + "likeTo INT,"
                + "FOREIGN KEY (likeFrom) REFERENCES profile(id)"
                + "FOREIGN KEY (likeTo) REFERENCES profile(id)"
            + ")";}

    protected String insertSql() {
        return "INSERT INTO likes(sendDate,likeFrom,likeTo) VALUES(?,?,?)";
    }
    protected String deleteSql() {
        return "DELETE FROM likes WHERE likeId = ?";
    }
    protected String updateSql() {
        return "UPDATE likes set sendDate=?, likeFrom=?, likeTo=? WHERE likeId=?";
    }
    protected String selectByIdSql() {
        return "SELECT * FROM likes WHERE likeId=?";
    }
    protected String selectAllSql() {
        return "SELECT * FROM likes";
    }

    protected void setupInsert(Like entity) throws SQLException{
            insert.setString(1, entity.getSendDate().toString());
            insert.setInt(2, entity.getLikeFrom());
            insert.setInt(3, entity.getLikeTo());
    }

    protected void setupUpdate(Like entity) throws SQLException{
            update.setString(1, entity.getSendDate().toString());
            update.setInt(2, entity.getLikeFrom());
            update.setInt(3, entity.getLikeTo());
}
    public List<Like> byProfile(Integer likeTo){
        try {
            List<Like> result = new ArrayList<Like>();
            selectByProfile.setInt(1, likeTo);
            ResultSet rs = selectByProfile.executeQuery();
            while (rs.next()) {
                result.add(mapper.map(rs));
            }
            return result;
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return null;
    }

    private PreparedStatement selectByProfile;
    private String selectByProfileSQL() {
        return "Select * FROM " + tableName() + " where likeTo =?";
    }

}